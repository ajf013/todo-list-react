[{"/home/ajf013/Projects/React-todo-list/src/index.js":"1","/home/ajf013/Projects/React-todo-list/src/App.js":"2","/home/ajf013/Projects/React-todo-list/src/components/Footer/Footer.js":"3","/home/ajf013/Projects/React-todo-list/src/modals/EditTask.js":"4","/home/ajf013/Projects/React-todo-list/src/components/Card.js":"5","/home/ajf013/Projects/React-todo-list/src/serviceWorkerRegistration.js":"6","/home/ajf013/Projects/React-todo-list/src/modals/CreateTask.js":"7","/home/ajf013/Projects/React-todo-list/src/components/TodoList.js":"8"},{"size":421,"mtime":1625029243158,"results":"9","hashOfConfig":"10"},{"size":363,"mtime":1624978451551,"results":"11","hashOfConfig":"10"},{"size":1499,"mtime":1624978011154,"results":"12","hashOfConfig":"10"},{"size":1804,"mtime":1625019937599,"results":"13","hashOfConfig":"10"},{"size":1902,"mtime":1625030914814,"results":"14","hashOfConfig":"10"},{"size":5314,"mtime":1624980974580,"results":"15","hashOfConfig":"10"},{"size":1638,"mtime":1625032468849,"results":"16","hashOfConfig":"10"},{"size":1791,"mtime":1624976626916,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"wt47uy",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ajf013/Projects/React-todo-list/src/index.js",[],"/home/ajf013/Projects/React-todo-list/src/App.js",[],["37","38"],"/home/ajf013/Projects/React-todo-list/src/components/Footer/Footer.js",[],["39","40"],"/home/ajf013/Projects/React-todo-list/src/modals/EditTask.js",["41"],"import React, { useState , useEffect} from 'react';\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\n\nconst EditTaskPopup = ({modal, toggle, updateTask, taskObj}) => {\n    const [taskName, setTaskName] = useState('');\n    const [description, setDescription] = useState('');\n\n    const handleChange = (e) => {\n        \n        const {name, value} = e.target\n\n        if(name === \"taskName\"){\n            setTaskName(value)\n        }else{\n            setDescription(value)\n        }\n\n\n    }\n\n    useEffect(() => {\n        setTaskName(taskObj.Name)\n        setDescription(taskObj.Description)\n    },[])\n\n    const handleUpdate = (e) => {\n        e.preventDefault();\n        let tempObj = {}\n        tempObj['Name'] = taskName\n        tempObj['Description'] = description\n        updateTask(tempObj)\n    }\n\n    return (\n        <Modal isOpen={modal} toggle={toggle}>\n            <ModalHeader toggle={toggle}>Update Task</ModalHeader>\n            <ModalBody>\n            \n                    <div className = \"form-group\">\n                        <label>Task Name</label>\n                        <input type=\"text\" className = \"form-control\" value = {taskName} onChange = {handleChange} name = \"taskName\"/>\n                    </div>\n                    <div className = \"form-group\">\n                        <label>Description</label>\n                        <textarea rows = \"5\" className = \"form-control\" value = {description} onChange = {handleChange} name = \"description\"></textarea>\n                    </div>\n                \n            </ModalBody>\n            \n            <button class=\"ui green button\" onClick={handleUpdate}>Update</button>{' '}\n            <button class=\"ui grey button\" onClick={toggle}>Cancel</button>\n              </Modal>\n    );\n};\n\nexport default EditTaskPopup;","/home/ajf013/Projects/React-todo-list/src/components/Card.js",[],"/home/ajf013/Projects/React-todo-list/src/serviceWorkerRegistration.js",[],"/home/ajf013/Projects/React-todo-list/src/modals/CreateTask.js",[],"/home/ajf013/Projects/React-todo-list/src/components/TodoList.js",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"42","replacedBy":"46"},{"ruleId":"44","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":24,"column":7,"nodeType":"50","endLine":24,"endColumn":9,"suggestions":"51"},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],["52"],["53"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'taskObj.Description' and 'taskObj.Name'. Either include them or remove the dependency array. If 'setTaskName' needs the current value of 'taskObj.Name', you can also switch to useReducer instead of useState and read 'taskObj.Name' in the reducer.","ArrayExpression",["54"],"no-global-assign","no-unsafe-negation",{"desc":"55","fix":"56"},"Update the dependencies array to be: [taskObj.Description, taskObj.Name]",{"range":"57","text":"58"},[607,609],"[taskObj.Description, taskObj.Name]"]